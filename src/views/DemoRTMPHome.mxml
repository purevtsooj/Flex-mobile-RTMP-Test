<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" title="RTMP Stream Demo"
		initialize="init()" xmlns:mx="library://ns.adobe.com/flex/mx">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			
			import flash.media.Video;
			import flash.net.NetConnection;
			import flash.net.NetStream;
			import mx.core.UIComponent;
			
			private var vid:Video;
			private var videoHolder:UIComponent;
			private var nc:NetConnection;
			
			private var defaultURL:String="rtmp://67.207.78.25/live/";
			private var videoURL:String="/Radio1KK";
			
			//private var defaultURL:String="rtmp://202.131.235.59/live/";
			//private var videoURL:String="/livestream";
			
			//private var defaultURL:String="http://96.31.83.87:8011/stream";
			//private var videoURL:String="stream";
			
			private var ns:NetStream;
			private var msg:Boolean;
			
			private var intervalMonitorBufferLengthEverySecond:uint;
			
			private function init():void
			{
				vid=new Video();
				vid.width=200;
				vid.height=150;
				vid.visible = true;
				vid.smoothing = true;
				
				videoHolder = new UIComponent();
				videoHolder.width = 200;
				videoHolder.height = 150;
				videoHolder.addChild(vid);
				addElement(videoHolder);
				
				addEventListener(SecurityErrorEvent.SECURITY_ERROR, onSecurityError);
				connect();
			}
			
			public function onSecurityError(e:SecurityError):void
			{
				trace("Security error: ");
			}
			
			public function connect():void
			{
				nc = new NetConnection();
				nc.client = this;
				nc.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
				nc.connect(defaultURL);                 
			}
			
			public function netStatusHandler(e:NetStatusEvent):void
			{
				switch (e.info.code) {
					case "NetConnection.Connect.Success":
						label_status.text = "Connected successfully";
						createNS();                 
						break;
					case "NetConnection.Connect.Closed":
						label_status.text = "Connection closed";
						connect();
						break;  
					case "NetConnection.Connect.Failed":
						trace("Connection failed");                 
						break;
					case "NetConnection.Connect.Rejected":
						trace("Connection rejected");                                   
						break;  
					case "NetConnection.Connect.AppShutdown":
						trace("App shutdown");                                  
						break;          
					case "NetConnection.Connect.InvalidApp":
						trace("Connection invalid app");                                    
						break;                                                                                                      
				}           
			}
			
			public function createNS():void
			{
				label_status.text = "Creating NetStream";
				ns=new NetStream(nc);
				ns.addEventListener(NetStatusEvent.NET_STATUS, netStreamStatusHandler);
				vid.attachNetStream(ns);
				
				var infoClient:Object = new Object();
				infoClient.onMetaData = function oMD():void {};
				infoClient.onCuePoint = function oCP():void {};         
				ns.client = infoClient; 
				ns.play(videoURL);
				ns.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);
				function asyncErrorHandler(event:AsyncErrorEvent):void {
					label_status.text = event.text;
				}   
				intervalMonitorBufferLengthEverySecond = setInterval(monPlayback, 1000);
			}
			
			public function netStreamStatusHandler(e:NetStatusEvent):void
			{
				switch (e.info.code) {
					case "NetStream.Buffer.Empty":
						label_status.text = "Buffer empty";
						break;
					case "NetStream.Buffer.Full":
						label_status.text = "Buffer full";
						break;
					case "NetStream.Play.Start":
						label_status.text = "Play start";
						break;                      
				}       
			}
			
			public function monPlayback():void {
				label_status.text = "Playing...";
			}
			
			public function onBWDone():void { 
				
			}           
			
			public function onFCSubscribe(info:Object):void {       
				
			}
			
			public function onFCUnsubscribe(info:Object):void {     
				
			}
			
		]]>
	</fx:Script>
	<s:VGroup id="myVBox" width="100%" height="100%" paddingLeft="20" paddingTop="20">
		<s:Label id="label_status" text="Status"/>
		
	</s:VGroup>
	
</s:View>
